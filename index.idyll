// installed components
// npm install --save react-simple-pie-chart
// npm install --save idyll-vega-lite vega vega-lite

[meta title:"Monty Hall Problem" description:"An explorable explaination" /]

[Header
  fullWidth:true
  title:"The Monty Hall Problem"
  subtitle:"A logic defying probability paradox"
  author:"Christie Gan, Grant Suyama, Juan Alvarez"
  authorLink:"https://github.com/suyamag/info474final/tree/master"
  background:"#222222"
  color:"#ffffff"
   /]

## Introduction

![doors](static/images/doors.png)

The game show Let's Make a Deal came about in 1963 in the US and was created and produced by Stefan Hatos and Monty Hall.
Selected audience members make deals with the host, Monty, where the member is offered something of value
and given a choice of whether to keep or exchange it for a different, possibly more valuable item.
One of these deals became a famous brain teaser, later known as the Monty Hall problem, named 
after the host, Monty Hall. This probability puzzle's answer seems counterintuitive but
the math checks out. 

Let's take a look at this problem.

## The Scenario

![opendoor](static/images/open_door.png)
Suppose you're on a game show, and you're given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host Monty, who knows what's behind the doors, opens another door, say No. 3, which has a goat. He then says to you, "Do you want to change your pick to door No. 2?" Is it to your advantage to switch your choice?

The answer is: ***yes!***

In fact, changing your door choice actually doubles your choice of winning the car!

## how does this work? 

We'll begin by reiterating the rules of the game and the behavior of Monty:

1) The contestant may pick any of the three doors

2) Monty must then open a door that was not picked by the contestant

3) Monty must always reveal a goat behind the new door, not a car

4) Monty must always offer the chance to switch from the original door to the remaining door

Now, given these rules we can start looking at our possible choices and the probabilities behind each choice!

## Choices and Outcomes

![doors](static/images/doors.png)

At the start of the game, each door is closed.

When you initially pick a door, you only have a 1/3 chance of finding the car.

On the other hand, you have a 2/3 chance of picking a goat on your initial guess.

![doorprob](static/images/doorprob.png)

After you've made your inital pick, Monty reveals a goat.

Due to the rules of the game, Monty's pick relies both on what your initial pick was, and where the car is.

If you picked a goat door on your initial guess (2/3), then Monty is forced to open the one other goat door.

![goat](static/images/goat.png)

If you picked the car on your initial guess (1/3), then Monty may open either of the two goat doors available.

![car](static/images/car.png)


##A practical way of looking at the problem
If you picked a goat on your initial guess (2/3), when monty asks if you would like to switch doors, swithing would lead to a win.

If you picked the car on your initial guess (1/3), then switching would lead to a loss

##important things to note

if you decide to stay, then your chances remain 1/3, because you made your choice before any prior interference was made, and decided to stick with that choice

##50/50 probability and Markov chain?
many statisticians have argued that Monty's choice does not reveal any new information relevant to the probabilities of the doors.
This is a true assessment if only looking at the subjective probability. The uncertainty of the situation is 50/50 because the remaining outcomes of either 
a winning or a losing scenario is 50% (one car and one goat).

However, from the objective probability point of view, there was a 1/3 chance you got the right door at the moment of choice.  This means that there is a 2/3 chance it is behind one of the other doors.  When the host shows you one of these other doors as being empty- now you have a guarantee of having the right choice with the remaining door 2/3 of the time.

So 1/3 of the time you will already have the right door, and 2/3 of the time you have the wrong door.  Therefore you should switch from an objective point of view.

[var name:"stepperIndex" value:1 /]

[Stepper currentStep:stepperIndex]
  [Graphic]
     [img src:`"static/images/" + stepperIndex + ".png"` /]
  [/Graphic]

  [Step]
  start
  [/Step]
  [Step]
  1
  [/Step]
  [Step]
  2
  [/Step]
  [Step]
  3
  [/Step]

  [StepperControl /]
[/Stepper]

// [var name:"state" value:0 /]
// [CustomD3Component className:"d3-component" state:state /]
// [button onClick:`state++`]
//   Click Me.
// [/button]

// Configuration can be done via the `idyll` field in `package.json`.

// ## Markup

// Idyll is based on Markdown.

// You can use familiar syntax
// to create **bold** (`**bold**` ) and *italic* (``*italic*` ) styles,

// * lists
// * of
// * items,

// ```
// * lists
// * of
// * items,
// ```

// 1. and numbered
// 2. lists
// 3. of items,


// ```
// 1. and numbered
// 2. lists
// 3. of items,
// ```

// in addition to [hyperlinks](https://idyll-lang.org) and images:

// ![quill](static/images/quill.svg)

// ```
// ![quill](static/images/quill.svg)
// ```

// ## Components

// Components can be embedded using a bracket syntax:

// ```
// [Range /]
// ```

// and can contain nested content:

// ```
// [Equation]e = mc^{2}[/Equation]
// ```

// Components accept properties:

// ```
// [Range value:x min:0 max:1 /]
// ```

// that can be bound to variables to achieve interactivity (more in next section).


// A variety of components are included by default. See [all the available components](https://idyll-lang.org/docs/components/). You can also use any html tag, for example: `[div] A div! [/div]`.

// To create your own, add it to the `components/` folder. There are examples of how to use Idyll with React and D3 based components already included.



// ## Interactivity

// Here is how you can instantiate a variable and bind it to a component:

// [var name:"exampleVar" value:5 /]

// [Range min:0 max:10 value:exampleVar /]
// [Display value:exampleVar /]

// ```
// [var name:"exampleVar" value:5 /]

// [Range min:0 max:10 value:exampleVar /]
// [Display value:exampleVar /]
// ```

// ## Learn More

// To learn more see the documentation at https://idyll-lang.org/docs/,
// join our [chatroom](https://gitter.im/idyll-lang/Lobby), or see the project on [GitHub](https://github.com/idyll-lang/idyll).
